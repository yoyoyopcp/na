#!/usr/bin/env python
from __future__ import print_function
import argparse

from lib import util
from lib import vol


def print_connected_vol_info(names):
    pass


def print_vol_info(names):
    header = 'Name Size Source Created Serial'.split()
    vol_info = [[v[key.lower()] for key in header] for v in vol.list_vols(names)]
    if not vol_info:
        return
    vol_info.insert(0, header)
    util.print_columns(vol_info)


def parse_args():
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(title='subcommands',
                                       description='valid subcommands',
                                       dest='command')
    # na_vol create
    create_parser = subparsers.add_parser('create', help='Create a volume.')
    create_parser.add_argument('name', help='Name of volume to create.')
    create_parser.add_argument('--size', required=True, help='volume size.')

    # na_vol destroy
    destroy_parser = subparsers.add_parser('destroy', help='Destroy a volume.')
    destroy_parser.add_argument('name', help='Name of volume to destroy.')

    # na_vol recover
    recover_parser = subparsers.add_parser('recover', help='Recover a destroyed volume.')
    recover_parser.add_argument('name', help='Name of volume to recover.')

    # na_vol eradicate
    eradicate_parser = subparsers.add_parser('eradicate', help='Eradicate a volume.')
    eradicate_parser.add_argument('name', help='Name of volume to eradicate.')

    # na_vol connect
    connect_parser = subparsers.add_parser('connect', help='Connect a volume to a host.')
    connect_parser.add_argument('name', help='Name of vol to connect.')
    connect_parser.add_argument('--host', required=True, help='Name of host to connect to.')

    # na_vol disconnect
    disconnect_parser = subparsers.add_parser('disconnect',
                                              help='Disconnect a volume from a host.')
    disconnect_parser.add_argument('name', help='Name of vol to disconnect.')
    disconnect_parser.add_argument('--host', required=True, help='Name of host to disconnect to.')

    # na_vol list
    list_parser = subparsers.add_parser('list', help='List volumes.')
    list_parser.add_argument('names', nargs='*', help='Name of volumes to list.')
    list_parser.add_argument('--connect', action='store_true',
                             help='List connected volumes.')

    # na_vol rename
    rename_parser = subparsers.add_parser('rename', help='Rename a volume.')
    rename_parser.add_argument('old_name', help='Name of volume to rename.')
    rename_parser.add_argument('new_name', help='New name of volume.')

    return parser.parse_args()


def main():
    args = parse_args()
    if args.command == 'create':
        vol.create_vol(args.name, args.size)
    elif args.command == 'destroy':
        vol.destroy_vol(args.name)
    elif args.command == 'recover':
        vol.recover_vol(args.name)
    elif args.command == 'eradicate':
        vol.eradicate_vol(args.name)
    elif args.command == 'connect':
        vol.connect_vol(args.name, args.host)
    elif args.command == 'disconnect':
        vol.disconnect_vol(args.name, args.host)
    elif args.command == 'list':
        if args.connect:
            print_connected_vol_info(args.names)
        else:
            print_vol_info(args.names)
    elif args.command == 'rename':
        vol.rename_vol(args.old_name, args.new_name)


if __name__ == "__main__":
    main()
